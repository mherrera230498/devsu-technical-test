name: My App to EKS with Helm Workflow

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**/README.md'
  pull_request:
    branches: [ master ]    
    paths-ignore:
      - '**/README.md'
  
env:
  NODE_VERSION: 18
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_VERSION: ${{ format('{0}-{1}', github.run_id, github.run_number) }}
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: my-eks-cluster
  HELM_CHART_DIRECTORY: helm_chart/
  
jobs:
  build-and-test:
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Clean install modules
        run: npm ci
      - name: Run build
        run: npm run build --if-present
      - name: Execute jest test with coverage
        run: npx jest --coverage
      
  eslint:
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Clean install  moduels
        run: npm ci
      - name: Eslint
        run: npx eslint .
        
  snyk:
    if: always()
    runs-on: ubuntu-latest    
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@master
      - name: Perform SAST
        if: always()
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
          args: --severity-threshold=medium --sarif-file-output=snyk-sast.sarif
      - name: Perform SCA
        if: always()
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=medium --sarif-file-output=snyk-sca.sarif
      - name: Upload SAST result to GitHub Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-sast.sarif
          category: sast
      - name: Upload SCA result to GitHub Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-sca.sarif
          category: sca

  docker-build:
    if: always()
    needs: [build-and-test, eslint, snyk]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        if: github.event_name != 'pull_request'
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.IMAGE_VERSION }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
  dev:
    if: |
      always() &&
      github.ref == 'refs/heads/master'
    needs: [docker-build]
    environment: 
      name: dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Set kubectl eks context
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
      - name: Deploy helm chart to EKS
        uses: ./.github/actions/helm-deployment
        with:
          helm_namespace: ${{ vars.HELM_NAMESPACE }}
          helm_chart_directory: ${{ env.HELM_CHART_DIRECTORY }}
          image_repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          image_tag: ${{ env.IMAGE_VERSION }}
          execute_helm_test: ${{ vars.EXECUTE_HELM_TEST }}
          service_type: NodePort
          
  prod-deploy:
    if: |
      always() &&
      github.ref == 'refs/heads/master'
    needs: [dev]
    environment: 
      name: prod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Set kubectl eks context
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
      - name: Deploy helm chart to EKS
        uses: ./.github/actions/helm-deployment
        with:
          helm_namespace: ${{ vars.HELM_NAMESPACE }}
          helm_chart_directory: ${{ env.HELM_CHART_DIRECTORY }}
          image_repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          image_tag: ${{ env.IMAGE_VERSION }}
          execute_helm_test: ${{ vars.EXECUTE_HELM_TEST }}
